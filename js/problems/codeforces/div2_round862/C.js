"use strict";
const { inputData, outputData, readline, print } = require('../lib/codeforces-tester');

inputData(`
5
1 2
1
1 -1 2
1 -1 3
2 2
1
4
1 2 1
2 5 1
1 1
0
1 0 0
1 1
100000000
100000000 100000000 100000000
2 3
0
2
2 2 1
1 -2 1
1 -2 -1

`)

outputData(`
YES
1
YES
1

YES
1
YES
4

NO

YES
100000000

YES
2
NO
NO

`)

// solution to copy and send below (for JS important to add: "use strict";)
"use strict";

var findClosestGreaterOrEqual = (sorted_arr, val) => {
    let left = 0, right = sorted_arr.length - 1

    while (left <= right) {
        const mid = Math.floor((left + right) / 2)
        if (val > sorted_arr[mid]) {
            left = mid + 1
        } else if (val < sorted_arr[mid]) {
            right = mid - 1
        } else {
            return [val]
        }
    }

    const searchResult = []
    if (sorted_arr[left] !== undefined) {
        searchResult.push(sorted_arr[left])
    }
    if (sorted_arr[right] !== undefined) {
        searchResult.push(sorted_arr[right])
    }

    return searchResult
}

var canIntersect = function (k, a, b, c) {
    let _b = b - k

    let discriminant = _b * _b - 4 * a * c;

    if (discriminant < 0) return ['YES', k]

    return ['NO']
};

var C = function (kArr, abcArr) {
    const res = []
    kArr.sort((a, b) => a - b)

    for (const abc of abcArr) {
        let result;
        // instead of searching through all line just search line k which close to b (discriminant might be less than 0 if k will be close to b)
        // https://codeforces.com/blog/entry/114644
        const closestKtoBarr = findClosestGreaterOrEqual(kArr, abc[1])
        for (const k of closestKtoBarr) {
            result = canIntersect(k, abc[0], abc[1], abc[2])
            if (result.length > 1) {
                break
            }
        }

        if (result) {
            res.push(result)
        } else {
            res.push(['NO'])
        }
    }

    return res
};

(function() {
    const t = readline(); // first line of input usually gives the no. of test cases,i.e, the no. of lines ahead.

    for(let i = 0; i < t; i++) {
        const n_m = readline().split(' '); // string length

        let n = +n_m[0]
        let m = +n_m[1]

        const kArr = []

        while (n-- > 0) {
            kArr.push(+readline())
        }

        const abcArr = []

        while (m-- > 0) {
            abcArr.push(readline().split(' ').map(num => +num))
        }

        const res = C(kArr, abcArr)
        for (const a of res) {
            for (const b of a) {

                print(b);
            }
        }
    }
})()


/**
 * https://codeforces.com/contest/1805/problem/C
 *
 * –ü–æ–¥—Å–∫–∞–∑–∫–∏:
 * –ó–∞–º–µ—Ç–∏–º, —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä—è–º–æ–π –∏ –ø–∞—Ä–∞–±–æ–ª–æ–π —Ç–æ–∂–µ –±—É–¥–µ—Ç –ø–∞—Ä–∞–±–æ–ª–æ–π. –¢–æ–≥–¥–∞ –∫–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä—è–º–∞—è –∏ –ø–∞—Ä–∞–±–æ–ª–∞ –Ω–µ –∏–º–µ—é—Ç –æ–±—â–∏—Ö —Ç–æ—á–µ–∫?
 * –í—Å–ø–æ–º–Ω–∏–º —Ñ–æ—Ä–º—É–ª—É –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞ –∏–∑ —à–∫–æ–ª—ã: –ï—Å–ª–∏ –¥–∞–Ω–∞ –ø–∞—Ä–∞–±–æ–ª–∞ ùëéùë•2+ùëèùë•+ùëê, —Ç–æ –≤—ã—á–∏—Å–ª–∏–º ùê∑=ùëè2‚àí4ùëéùëê (–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç). –¢–æ–≥–¥–∞, –µ—Å–ª–∏ ùê∑>0, —Ç–æ —É –ø–∞—Ä–∞–±–æ–ª—ã 2 –∫–æ—Ä–Ω—è, –µ—Å–ª–∏ ùê∑=0, —Ç–æ –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å, –µ—Å–ª–∏ ùê∑<0, —Ç–æ –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç.
 * –ï—Å–ª–∏ –º—ã –≤—ã–±–µ—Ä–µ–º –ø–∞—Ä–∞–±–æ–ª—É ùëéùë•2+ùëèùë•+ùëê, —Ç–æ –Ω–µ –∏–º–µ—é—Ç —Å –Ω–µ–π –æ–±—â–∏—Ö —Ç–æ—á–µ–∫ –ø—Ä—è–º—ã–µ —Å —Ç–∞–∫–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ùëò, —á—Ç–æ (ùëè‚àíùëò)2<4ùëéùëê. –ö–∞–∫ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ ùëò —Å—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö?
 *
 * –†–∞–∑–±–æ—Ä:
 * 1805C - –ú–µ—Å—Ç–∞ –¥–ª—è —Å–µ–ª—Ñ–∏
 * –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Ä–∞–±–æ–ª—ã –ø–æ –æ–¥–Ω–æ–π. –ü—É—Å—Ç—å –Ω–∞–º –¥–∞–Ω–∞ –ø–∞—Ä–∞–±–æ–ª–∞ ùëéùë•2+ùëèùë•+ùëê –∏ –ø—Ä—è–º–∞—è ùëòùë•. –¢–æ–≥–¥–∞ –∏—Ö —Ä–∞–∑–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø–∞—Ä–∞–±–æ–ª–æ–π ùëéùë•2+(ùëè‚àíùëò)ùë•+ùëê.
 * –ß—Ç–æ–±—ã –ø—Ä—è–º–∞—è –∏ –ø–∞—Ä–∞–±–æ–ª–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª–∏—Å—å –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ä–∞–∑–Ω–æ—Å—Ç—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞–≤–Ω—è–ª–∞—Å—å 0, —Ç–æ –µ—Å—Ç—å —É –ø–∞—Ä–∞–±–æ–ª—ã ùëéùë•2+(ùëè‚àíùëò)ùë•+ùëê –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–Ω–µ–π.
 * –ê —ç—Ç–æ –≤–µ—Ä–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –º–µ–Ω—å—à–µ 0, —Ç–æ –µ—Å—Ç—å (ùëè‚àíùëò)2<4ùëéùëê. –ü—Ä–∏ —ç—Ç–æ–º ùëé,ùëè –∏ ùëê –Ω–∞–º –¥–∞–Ω—ã, –∞ –Ω–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å ùëò. (ùëè‚àíùëò)2<4ùëéùëê‚üπ|ùëè‚àíùëò|<4ùëéùëê‚Äæ‚Äæ‚Äæ‚Äæ‚àö‚üπùëè‚àí4ùëéùëê‚Äæ‚Äæ‚Äæ‚Äæ‚àö<ùëò<ùëè+4ùëéùëê‚Äæ‚Äæ‚Äæ‚Äæ‚àö.
 *
 * –ü—É—Å—Ç—å —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä—è–º—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
 * –ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤ –Ω—ë–º —á–∏—Å–ª–æ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –æ—Ç—Ä–µ–∑–∫—É [ùëè‚àí4ùëéùëê‚Äæ‚Äæ‚Äæ‚Äæ‚àö;ùëè+4ùëéùëê‚Äæ‚Äæ‚Äæ‚Äæ‚àö].
 * –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ ùëè, –∞ —Ç–∞–∫–∂–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ ùëè.
 * –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —á–∏—Å–µ–ª —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é, —Ç–æ –º—ã –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç.
 * –ï—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ —Å—Ä–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤–∑—è–ª–∏ 2 –±–ª–∏–∂–∞–π—à–∏—Ö –∫ —Ü–µ–Ω—Ç—Ä—É –æ—Ç—Ä–µ–∑–∫–∞.
 *
 * –ó–∞–º–µ—Ç–∏–º, —á—Ç–æ –≤ —ç—Ç–æ–º —É—Å–ª–æ–≤–∏–∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ—Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏, —á—Ç–æ —Ö–æ—Ä–æ—à–æ –≤–ª–∏—è–µ—Ç –∏ –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –∏ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π.
 *
 * –†–µ—à–µ–Ω–∏–µ:
 * #include <bits/stdc++.h>
 * #define int long long
 *
 * using namespace std;
 *
 *
 * void solve() {
 *     int n, m;
 *     cin >> n >> m;
 *     vector <int> lines(n);
 *     for (int i = 0; i < n; i++) {
 *         cin >> lines[i];
 *     }
 *     sort(lines.begin(), lines.end());
 *
 *     for (int i = 0; i < m; i++) {
 *         int a, b, c;
 *         cin >> a >> b >> c;
 *
 *         int ind = lower_bound(lines.begin(), lines.end(), b) - lines.begin();
 *         if (ind < n && (lines[ind] - b) * (lines[ind] - b) < 4 * a * c) {
 *             cout << "YES\n" << lines[ind] << "\n";
 *             continue;
 *         }
 *         if (ind > 0 && (lines[ind - 1] - b) * (lines[ind - 1] - b) < 4 * a * c) {
 *             cout << "YES\n" << lines[ind - 1] << "\n";
 *             continue;
 *         }
 *         cout << "NO\n";
 *     }
 * }
 *
 *
 * signed main() {
 *     ios::sync_with_stdio(false);
 *     cin.tie(nullptr);
 *
 *     int q = 1;
 *     cin >> q;
 *     while (q--) {
 *         solve();
 *     }
 *     return 0;
 * }
 *
 */
